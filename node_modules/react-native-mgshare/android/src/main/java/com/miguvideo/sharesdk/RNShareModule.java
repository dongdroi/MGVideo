package com.miguvideo.sharesdk;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Log;
import android.net.Uri;
import android.widget.Toast;
import android.content.Context;
import android.app.Activity;
import com.facebook.common.executors.UiThreadImmediateExecutorService;
import com.facebook.common.internal.Files;
import com.facebook.common.references.CloseableReference;
import com.facebook.common.util.UriUtil;
import com.facebook.datasource.DataSource;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.imagepipeline.common.ResizeOptions;
import com.facebook.imagepipeline.core.ImagePipeline;
import com.facebook.imagepipeline.datasource.BaseBitmapDataSubscriber;
import com.facebook.imagepipeline.image.CloseableImage;
import com.facebook.imagepipeline.request.ImageRequest;
import com.facebook.imagepipeline.request.ImageRequestBuilder;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.sina.weibo.sdk.api.WebpageObject;
import com.sina.weibo.sdk.api.WeiboMessage;
import com.sina.weibo.sdk.api.share.BaseResponse;
import com.sina.weibo.sdk.api.share.IWeiboHandler;
import com.sina.weibo.sdk.api.share.IWeiboShareAPI;
import com.sina.weibo.sdk.api.share.WeiboShareSDK;
import com.sina.weibo.sdk.constant.WBConstants;
import com.sina.weibo.sdk.utils.Utility;
import com.sina.weibo.sdk.api.share.SendMessageToWeiboRequest;
import com.tencent.mm.sdk.modelbase.BaseReq;
import com.tencent.mm.sdk.modelbase.BaseResp;
import com.tencent.mm.sdk.modelmsg.SendMessageToWX;
import com.tencent.mm.sdk.modelmsg.WXMediaMessage;
import com.tencent.mm.sdk.modelmsg.WXWebpageObject;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.IWXAPIEventHandler;
import com.tencent.mm.sdk.openapi.WXAPIFactory;

import java.util.ArrayList;
import java.lang.reflect.Method;

/**
 * Created by Administrator on 2016/5/27.
 */
public class RNShareModule extends ReactContextBaseJavaModule implements IWXAPIEventHandler, IWeiboHandler.Response {
    private static final String TAG = RNShareModule.class.getSimpleName();
    private static final String MODULE_NAME = "MGShareSdkModule";
    private ReactApplicationContext reactContext;
    private static final String WEIBO_APPKEY = "1736176772";              //微博接入ID
    private static final String WEIBO_ACTION = "com.sina.weibo.sdk.action.ACTION_SDK_REQ_ACTIVITY";
    private static final String WEIXIN_APPID = "wx1ffd02e28f66ce00";       //微信接入ID
    private static final int SCENE_TYPE_SESSION = SendMessageToWX.Req.WXSceneSession;
    private static final int SCENE_TYPE_TIMELINE = SendMessageToWX.Req.WXSceneTimeline;
    private static final int SCENE_TYPE_SINAWEIBO = 2;
    private IWXAPI wxapi = null;
    private IWeiboShareAPI weiboShareAPI = null;
    
    public RNShareModule(ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
        registerApp(WEIXIN_APPID, WEIBO_APPKEY);
    }

    public void registerApp(String appid, String appkey) {
        Context context = this.getReactApplicationContext().getBaseContext();
        // 创建微信朋友圈分享接口实例
        wxapi = WXAPIFactory.createWXAPI(context, appid, true);
        wxapi.registerApp(appid);

        // 创建微博分享接口实例
        weiboShareAPI = WeiboShareSDK.createWeiboAPI(context, appkey);
        weiboShareAPI.registerApp();
    }

    @Override
    public String getName() {
        return MODULE_NAME;
    }

    private static ArrayList<RNShareModule> modules = new ArrayList<>();

    @Override
    public void initialize() {
        super.initialize();
        modules.add(this);
    }

    @Override
    public void onCatalystInstanceDestroy() {
        super.onCatalystInstanceDestroy();
        if (wxapi != null) {
            wxapi = null;
        }
        if (weiboShareAPI != null) {
            weiboShareAPI = null;
        }
        modules.remove(this);
    }

    public static void handleIntent(Intent intent) {
        for (RNShareModule mod : modules) {
            if (WEIBO_ACTION.equals(intent.getAction())) {
                mod.weiboShareAPI.handleWeiboResponse(intent, mod);
            } else {
                mod.wxapi.handleIntent(intent, mod);
            }     
        }
    }

    @Override
    public void onReq(BaseReq baseReq){
    }

    @Override
    public void onResp(BaseResp baseResp){
        if (baseResp != null) {
            Log.d(TAG, "Weixin onResp errCode = " + baseResp.errCode);
        }
    }

    @Override
    public void onResponse(BaseResponse baseResp) {
        if (baseResp != null) {
            Log.d(TAG, "Weibo onResponse errCode = " + baseResp.errCode);
        }
    }

    @ReactMethod
    public void share(final int scene, final ReadableMap options, final Callback callback) {
        Log.i(TAG, "share scene = " + scene + ",api = " + wxapi + "," + weiboShareAPI);
        //目前只支持网页分享type = "webpage"
        if (!options.hasKey("type")) {
            Toast.makeText(reactContext, "Share type required.", Toast.LENGTH_SHORT).show();
            return;
        }
        if (!options.hasKey("webpageUrl")) {
            Toast.makeText(reactContext, "Share webpageUrl required.", Toast.LENGTH_SHORT).show();
            return;
        }
        Uri uri = null;
        if (options.hasKey("thumb")) {
            String imageUri = options.getString("thumb");
            try {
                uri = Uri.parse(imageUri);
            } catch (Exception e) {
                Log.e(TAG, "share imageUri parse e = " + e.getMessage());
            }
        }
        
        if (uri != null) {
            this.getImage(uri, new ResizeOptions(120, 120), new ImageCallback() {
                @Override
                public void invoke(Bitmap bitmap) {
                    RNShareModule.this._share(scene, options, bitmap, callback);
                }
            });
        } else {
            _share(scene, options, null, callback);   
        }
    }
    
    private void _share(int scene, ReadableMap options, Bitmap bitmap, Callback callback) {
        String title = "";
        if (options.hasKey("title")) {
            title = options.getString("title");
        }
        String description = "";
        if (options.hasKey("description")) {
            description = options.getString("description");
        }
        //若预览图为空或者加载异常,使用默认图标作为分享thumb
        if (bitmap == null) {
            bitmap = BitmapFactory.decodeResource(reactContext.getResources(),
                     R.drawable.ic_share_logo);
        }
        String webpageUrl = options.getString("webpageUrl");
        if (scene == SCENE_TYPE_SINAWEIBO) {
            shareWeibo(title, description, webpageUrl, bitmap);
        } else {
            shareWeixin(scene, title, description, webpageUrl, bitmap);
        }
        if (callback != null) {
            callback.invoke("success");
        }
    }
    
    private void shareWeibo(String title, String description, String url, Bitmap thumb) {
        if (this.getCurrentActivity() == null) {
            Log.e(TAG, "shareWeibo error activity == null");
            return;
        }
        WebpageObject mediaObject = new WebpageObject();
        mediaObject.identify = Utility.generateGUID();
        mediaObject.title = title;
        mediaObject.description = description;
        
        //Bitmap thumb = BitmapFactory.decodeResource(reactContext.getResources(), R.drawable.ic_share_logo);
        mediaObject.setThumbImage(thumb);
        mediaObject.actionUrl = url;
        //mediaObject.defaultText = "Webpage 默认文案";
        
        WeiboMessage weiboMessage = new WeiboMessage();
        weiboMessage.mediaObject = mediaObject;
        
        // 2. 初始化从第三方到微博的消息请求
        SendMessageToWeiboRequest request = new SendMessageToWeiboRequest();
        // 用transaction唯一标识一个请求
        request.transaction = String.valueOf(System.currentTimeMillis());
        request.message = weiboMessage;
        
        weiboShareAPI.sendRequest(this.getCurrentActivity(), request);
    }
    
    private void shareWeixin(int scene, String title, String description, String url, Bitmap thumb) {
        WXWebpageObject webpage = new WXWebpageObject();
        webpage.webpageUrl = url;
        WXMediaMessage msg = new WXMediaMessage(webpage);
        msg.title = title;
        msg.description = description;
        //Bitmap thumb = BitmapFactory.decodeResource(reactContext.getResources(), R.drawable.ic_share_logo);
        msg.thumbData = Util.bmpToByteArray(thumb, true);

        SendMessageToWX.Req req = new SendMessageToWX.Req();
        req.transaction = buildTransaction("webpage");
        req.message = msg;
        req.scene = scene;
        wxapi.sendReq(req);
    }
    
    private String buildTransaction(final String type) {
        return (type == null) ? String.valueOf(System.currentTimeMillis()) 
                : type + System.currentTimeMillis();
    }
    
    private Activity getCurrentActivity() {
        try {
            Method method = ReactContextBaseJavaModule.class
                    .getDeclaredMethod("getCurrentActivity", new Class[0]);
            Object result = method.invoke(this, new Object[0]);
            if (result != null) {
                return (Activity) result;
            }
        } catch (Exception e) {
            Log.i(TAG, "getCurrentActivity e = " + e.getMessage());
        }
        return null;
    }
    
    private void getImage(Uri uri, ResizeOptions resizeOptions, final ImageCallback imageCallback) {
        BaseBitmapDataSubscriber dataSubscriber = new BaseBitmapDataSubscriber() {
            @Override
            protected void onNewResultImpl(Bitmap bitmap) {
                bitmap = bitmap.copy(bitmap.getConfig(), true);
                imageCallback.invoke(bitmap);
            }

            @Override
            protected void onFailureImpl(DataSource<CloseableReference<CloseableImage>> dataSource) {
                imageCallback.invoke(null);
            }
        };

        ImageRequestBuilder builder = ImageRequestBuilder.newBuilderWithSource(uri);
        if (resizeOptions != null) {
            builder = builder.setResizeOptions(resizeOptions);
        }
        ImageRequest imageRequest = builder.build();

        ImagePipeline imagePipeline = Fresco.getImagePipeline();
        DataSource<CloseableReference<CloseableImage>> dataSource = imagePipeline.fetchDecodedImage(imageRequest, null);
        dataSource.subscribe(dataSubscriber, UiThreadImmediateExecutorService.getInstance());
    }
    
    private interface ImageCallback {
        void invoke(Bitmap bitmap);
    }
}
