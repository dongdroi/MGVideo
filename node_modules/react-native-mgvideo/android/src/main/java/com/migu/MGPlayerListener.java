package com.migu;

import android.util.Log;
import com.miguplayer.player.IMGPlayer;
import com.miguplayer.player.IMGPlayerListener;
import com.miguplayer.player.view.IMediaController;
import com.miguplayer.player.view.MGVideoView;

import com.facebook.react.common.SystemClock;
import com.facebook.react.uimanager.events.EventDispatcher;

public class MGPlayerListener implements IMGPlayerListener {
    
    public static final String TAG = "ReactNativeJS";
    private IMediaController mMediaController;
    private final EventDispatcher mEventDispatcher;
    private MGVideoView mMGVideoView;
    
    public MGPlayerListener(MGVideoView mgVideoView, EventDispatcher dispatcher, IMediaController controller) {
        mMGVideoView = mgVideoView;
        mEventDispatcher = dispatcher;
        mMediaController = controller;
    } 
    
    @Override
    public void onPrepared(IMGPlayer mp) {
        Log.d(TAG, "onPrepared");
        mp.start();
        if (mEventDispatcher != null) {
            mEventDispatcher.dispatchEvent(new MGPlayerPreparedEvent(mMGVideoView.getId(), SystemClock.nanoTime(), 1));
        }
        if (mMediaController != null) {
            mMediaController.setEnabled(true);
            mMediaController.hide();
        }
    }

    @Override
    public void onCompletion(IMGPlayer mp) {
        Log.d(TAG, "onCompletion");
    }

    @Override
    public void onBufferingUpdate(IMGPlayer mp, int percent) {
            
    }

    @Override
    public void onPlayPercent(IMGPlayer mp, int percent) {

    }

    @Override
    public void onSeekComplete(IMGPlayer mp) {
        Log.d(TAG, "onSeekComplete");
    }

    @Override
    public void onVideoSizeChanged(IMGPlayer mp, int width, int height, int sar_num, int sar_den) {
        Log.d(TAG, "onVideoSizeChanged width:" + width + ", height:" + height);
    }

    @Override
    public boolean onError(IMGPlayer mp, int what, int extra) {
        Log.d(TAG, "onError");
        if (mMediaController != null) {
            mMediaController.setEnabled(false);
            mMediaController.hide();
        }
        return true;
    }

    @Override
    public boolean onInfo(IMGPlayer mp, int what, int extra) {
        switch (what) {
            case IMGPlayer.MEDIA_INFO_VIDEO_TRACK_LAGGING:
                Log.d(TAG, "MEDIA_INFO_VIDEO_TRACK_LAGGING:");
                break;
            case IMGPlayer.MEDIA_INFO_VIDEO_RENDERING_START:
                Log.d(TAG, "MEDIA_INFO_VIDEO_RENDERING_START:");
                break;
            case IMGPlayer.MEDIA_INFO_BUFFERING_START:
                Log.d(TAG, "MEDIA_INFO_BUFFERING_START:");
                break;
            case IMGPlayer.MEDIA_INFO_BUFFERING_END:
                Log.d(TAG, "MEDIA_INFO_BUFFERING_END:");
                break;
            case IMGPlayer.MEDIA_INFO_NETWORK_BANDWIDTH:
                Log.d(TAG, "MEDIA_INFO_NETWORK_BANDWIDTH: " + extra);
                break;
            case IMGPlayer.MEDIA_INFO_BAD_INTERLEAVING:
                Log.d(TAG, "MEDIA_INFO_BAD_INTERLEAVING:");
                break;
            case IMGPlayer.MEDIA_INFO_NOT_SEEKABLE:
                Log.d(TAG, "MEDIA_INFO_NOT_SEEKABLE:");
                break;
            case IMGPlayer.MEDIA_INFO_METADATA_UPDATE:
                Log.d(TAG, "MEDIA_INFO_METADATA_UPDATE:");
                break;
            case IMGPlayer.MEDIA_INFO_UNSUPPORTED_SUBTITLE:
                Log.d(TAG, "MEDIA_INFO_UNSUPPORTED_SUBTITLE:");
                break;
            case IMGPlayer.MEDIA_INFO_SUBTITLE_TIMED_OUT:
                Log.d(TAG, "MEDIA_INFO_SUBTITLE_TIMED_OUT:");
                break;
            case IMGPlayer.MEDIA_INFO_VIDEO_ROTATION_CHANGED:
                Log.d(TAG, "MEDIA_INFO_VIDEO_ROTATION_CHANGED: " + extra);
                break;
            case IMGPlayer.MEDIA_INFO_AUDIO_RENDERING_START:
                Log.d(TAG, "MEDIA_INFO_AUDIO_RENDERING_START:");
                break;
            case IMGPlayer.MEDIA_INFO_CONNEC_DNS:
                Log.d(TAG, "MEDIA_INFO_CONNEC_DNS: " + extra);
                break;
            case IMGPlayer.MEDIA_INFO_CONNEC_REDIRECT:
                Log.d(TAG, "MEDIA_INFO_CONNEC_REDIRECT " + extra);
                break;
            case IMGPlayer.MEDIA_INFO_CONNEC_HIT:
                Log.d(TAG, "MEDIA_INFO_CONNEC_HIT " + extra);
                break;
            case IMGPlayer.MEDIA_INFO_CONNEC_PLAYLIST:
                break;
            default:
                break;
        }

        return false;
    }

    @Override
    public boolean dataCallback(IMGPlayer mp, int what, int extra, byte[] data) {
        Log.d(TAG, "dataCallback");

        switch (what) {
            case IMGPlayer.MEDIA_DATACALLBACK_SNAPSHOT_COMPLETE:
                int width = mp.getVideoWidth();
                int height = mp.getVideoHeight();
                Log.d(TAG, "MEDIA_DATACALLBACK_SNAPSHOT_COMPLETE data length:" + data.length + ", width:" + width + ", height:" + height);
                break;
            default:
                break;
        }
        return false;
    }
};