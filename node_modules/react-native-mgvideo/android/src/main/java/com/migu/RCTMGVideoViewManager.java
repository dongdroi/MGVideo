package com.migu;

import android.util.Log;

import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.SimpleViewManager;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.annotations.ReactProp;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.events.EventDispatcher;
import com.facebook.react.common.MapBuilder;
import com.facebook.react.common.SystemClock;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import android.text.TextUtils;
import android.content.Context;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import com.miguplayer.player.view.IMediaController;
import com.miguplayer.player.IMGPlayer;
import com.miguplayer.player.IMGPlayerListener;
import java.util.Map;
import javax.annotation.Nullable;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Configuration;
/**
 * Created by Administrator on 2016/4/25.
 */
public class RCTMGVideoViewManager extends SimpleViewManager<MGVideoPlayer> {
    public static final String TAG = "ReactNativeJS";
    public static final boolean DEBUG = true;
    public static final String REACT_CLASS = "RCTMGVideo";

    public static final String PROP_VIDEOPATH = "videoPath";
    public static final String PROP_STOPPED = "stopped";
    public static final String PROP_RESIZEMODE = "resizeMode";
    
    private Activity mActivity;

    public RCTMGVideoViewManager(Activity activity) {
        super();
        mActivity = activity;
    }

    @Override
    public String getName() {
        return REACT_CLASS;
    }

    @Override
    protected MGVideoPlayer createViewInstance(ThemedReactContext reactContext) {
        SharedPreferences sharedPrefs = reactContext.getSharedPreferences("login", 0);
        Editor editor = sharedPrefs.edit();
        editor.putString("user_name", "wangda");
        editor.putString("user_sn", "103");
        editor.commit();
        MGVideoPlayer videoPlayer = new MGVideoPlayer(reactContext);
        videoPlayer.setOrientationListener(new OrientationEventEmitter(reactContext, mActivity));
        return videoPlayer;
    }
    
    //@Override
    //protected void addEventEmitters(ThemedReactContext reactContext, MGVideoPlayer view) {
    //    view.setOrientationListener(new OrientationEventEmitter(reactContext, mActivity));
    //}

    //@Override
    //public Map getExportedCustomDirectEventTypeConstants() {
    //    return MapBuilder.of(
    //        MGOrientationEvent.EVENT_NAME, MapBuilder.of("registrationName", "orientationChanged")
    //    );
    //}

    @ReactProp(name = PROP_VIDEOPATH)
    public void setVideoPath(final MGVideoPlayer videoPlayer, final String videoPath) {
        if (DEBUG) {
            Log.d(TAG, "setVideoPath videoPath = " + videoPath);
        }
        if (videoPath != null && videoPath.length() > 0) {
            videoPlayer.setVideoPath(videoPath);
        }
    }
    
    @ReactProp(name = PROP_STOPPED, defaultBoolean = false)
    public void setStopped(final MGVideoPlayer videoPlayer, final boolean needStop) {
        if (DEBUG) {
            Log.d(TAG, "setStopped needStop = " + needStop);
        }
        if (needStop) {
            videoPlayer.stopPlayback();
        }
    }
    
    @ReactProp(name = PROP_RESIZEMODE)
    public void setResizeMode(final MGVideoPlayer videoPlayer, final int resizeMode) {
        if (DEBUG) {
            Log.d(TAG, "setResizeMode resizeMode = " + resizeMode);
        }
        videoPlayer.setResizeMode(resizeMode);
    }
    
    public static class OrientationEventEmitter implements OrientationListener {
        private final Activity mActivity;
        private boolean mRegistered = false;
        public OrientationEventEmitter(final ThemedReactContext reactContext,Activity activity) {
            mActivity = activity;
            final BroadcastReceiver receiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    Configuration newConfig = intent.getParcelableExtra("newConfig");
                    Log.d(TAG, "onReceive orientation = " + newConfig.orientation);
                    //mEventDispatcher.dispatchEvent(new MGOrientationEvent(mGVideoPlayer.getId(), 
                    //      SystemClock.nanoTime(), newConfig.orientation));
                          
                    WritableMap params = Arguments.createMap();
                    params.putString("orientation", String.valueOf(newConfig.orientation));
                    reactContext
                            .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                            .emit("fullScreenCallback", params);
                          
                }
            };
            final IntentFilter intentFilter = new IntentFilter("onConfigurationChanged");
            if (!mRegistered) {
                mActivity.registerReceiver(receiver, intentFilter);
                mRegistered = true;
            }
            LifecycleEventListener listener = new LifecycleEventListener() {
                @Override
                public void onHostResume() {
                    if (DEBUG) {
                        Log.d(TAG, "onHostResume registered");   
                    }
                    if (!mRegistered) {
                        mActivity.registerReceiver(receiver, intentFilter);
                        mRegistered = true;
                    }
                }

                @Override
                public void onHostPause() {
                    if (DEBUG) {
                        Log.d(TAG, "onHostPause unregistered");   
                    }
                    try {
                        if (mRegistered) {
                            mActivity.unregisterReceiver(receiver);
                            mRegistered = false;
                        }
                    } catch (java.lang.IllegalArgumentException e) {
                        Log.e(TAG, "onHostPause", e);
                    }
                }

                @Override
                public void onHostDestroy() {
                    if (DEBUG) {
                        Log.d(TAG, "onHostDestroy unregistered");
                    }
                    try {
                        if (mRegistered) {
                            mActivity.unregisterReceiver(receiver);
                            mRegistered = false;
                        }
                    } catch (java.lang.IllegalArgumentException e) {
                        Log.e(TAG, "onHostDestroy", e);
                    }
                }
            };
            reactContext.addLifecycleEventListener(listener);
        }
        
        @Override
        public void setRequestedOrientation(int orientation) {
            mActivity.setRequestedOrientation(orientation);
        }
        
        @Override
        public int getRequestedOrientation() {
            return mActivity.getRequestedOrientation();
        }
    }
}
