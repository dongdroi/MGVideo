package com.migu;

import android.content.Context;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.FrameLayout;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.miguplayer.player.IMGPlayer;
import com.miguplayer.player.IMGPlayerListener;
import com.miguplayer.player.view.MGVideoView;
import com.modulesdemo.R;
/**
 * Created by Administrator on 2016/5/19.
 */
public class MGVideoPlayer extends FrameLayout {
    public static final String TAG = "MGVideoPlayer";
    private MGVideoView mgVideoView;
    private MGControllerView mMediaController;
    private ProgressBar mProgressBar;

    public MGVideoPlayer(Context context) {
        this(context, null);
    }

    public MGVideoPlayer(Context context, AttributeSet attrs) {
        super(context, attrs);
        View root = LayoutInflater.from(context).inflate(R.layout.mgvideo_player, this);
        
        mProgressBar = (ProgressBar)root.findViewById(R.id.progress_bar);
        mMediaController = (MGControllerView)root.findViewById(R.id.media_controller);
        mMediaController.setVisibility(View.INVISIBLE);
        
        mgVideoView = (MGVideoView)root.findViewById(R.id.video_view);
        mgVideoView.setMediaController(mMediaController);
        
        mgVideoView.registerListener(mPlayerListener);
    }
    
    public void setVideoPath(String path) {
        if (mgVideoView != null) {
            mProgressBar.setVisibility(View.VISIBLE);

            mgVideoView.setVideoPath(path);
            mgVideoView.start();
        }
    }
    
    public IMGPlayer getPlayer() {
        if (mgVideoView != null) {
            return mgVideoView.getPlayer();
        }
        return null;
    }

    public void pause() {
        if (mgVideoView != null) {
            mgVideoView.pause();
        }
    }

    public void stopPlayback() {
        if (mgVideoView != null) {
            mgVideoView.stopPlayback();
        }
    }

    public void clearAdCache() {
        if (mgVideoView != null) {
            mgVideoView.clearAdCache();
        }
    }

    //Add normal video listener when the video uri is error 2016-02-18 start
    private IMGPlayerListener mPlayerListener = new IMGPlayerListener() {
        @Override
        public void onPrepared(IMGPlayer mp) {
            Log.d(TAG, "onPrepared");
            if (mProgressBar != null) {
                mProgressBar.setVisibility(View.GONE);
            }
            if (mMediaController != null) {
                mMediaController.setEnabled(true);
                //mMediaController.show();
            }
        }

        @Override
        public void onCompletion(IMGPlayer mp) {
            Log.d(TAG, "onCompletion");
        }

        @Override
        public void onBufferingUpdate(IMGPlayer mp, int percent) {
            //Log.d(TAG, "getPlayerVersion:" + mp.getPlayerVersion());
            //Log.d(TAG, "getAudioCachedBytes:" + Long.toString(mp.getAudioCachedBytes()));
            //Log.d(TAG, "getAudioCachedDuration:" + Long.toString(mp.getAudioCachedDuration()));
            //Log.d(TAG, "getAudioCachedPackets:" + Long.toString(mp.getAudioCachedPackets()));
            //Log.d(TAG, "getVideoCachedBytes:" + Long.toString(mp.getVideoCachedBytes()));
            //Log.d(TAG, "getVideoCachedDuration:" + Long.toString(mp.getVideoCachedDuration()));
            //Log.d(TAG, "getVideoCachedPackets:" + Long.toString(mp.getVideoCachedPackets()));

            //Log.d(TAG, "getDisplayFPS:" + String.valueOf(mp.getDisplayFPS()));
            //Log.d(TAG, "getDecoderFPS:" + String.valueOf(mp.getDecoderFPS()));
            //Log.d(TAG, "getVideoBitrate:" + String.valueOf(mp.getVideoBitrate()));
        }

        @Override
        public void onPlayPercent(IMGPlayer mp, int percent) {

        }

        @Override
        public void onSeekComplete(IMGPlayer mp) {
            Log.d(TAG, "onSeekComplete");
        }

        @Override
        public void onVideoSizeChanged(IMGPlayer mp, int width, int height, int sar_num, int sar_den) {
            Log.d(TAG, "onVideoSizeChanged width:" + width + ", height:" + height);
        }

        @Override
        public boolean onError(IMGPlayer mp, int what, int extra) {
            Log.d(TAG, "onError");

            if (mProgressBar != null) {
                mProgressBar.setVisibility(View.GONE);
            }
            if (mMediaController != null) {
                mMediaController.setEnabled(false);
                //mMediaController.hide();
            }
            //final IMGPlayer normalMediaPlayer = mp;
            return true;
        }

        @Override
        public boolean onInfo(IMGPlayer mp, int what, int extra) {
            switch (what) {
                case IMGPlayer.MEDIA_INFO_VIDEO_TRACK_LAGGING:
                    Log.d(TAG, "MEDIA_INFO_VIDEO_TRACK_LAGGING:");
                    break;
                case IMGPlayer.MEDIA_INFO_VIDEO_RENDERING_START:
                    Log.d(TAG, "MEDIA_INFO_VIDEO_RENDERING_START:");
                    break;
                case IMGPlayer.MEDIA_INFO_BUFFERING_START:
                    Log.d(TAG, "MEDIA_INFO_BUFFERING_START:");
                    break;
                case IMGPlayer.MEDIA_INFO_BUFFERING_END:
                    Log.d(TAG, "MEDIA_INFO_BUFFERING_END:");
                    break;
                case IMGPlayer.MEDIA_INFO_NETWORK_BANDWIDTH:
                    Log.d(TAG, "MEDIA_INFO_NETWORK_BANDWIDTH: " + extra);
                    break;
                case IMGPlayer.MEDIA_INFO_BAD_INTERLEAVING:
                    Log.d(TAG, "MEDIA_INFO_BAD_INTERLEAVING:");
                    break;
                case IMGPlayer.MEDIA_INFO_NOT_SEEKABLE:
                    Log.d(TAG, "MEDIA_INFO_NOT_SEEKABLE:");
                    break;
                case IMGPlayer.MEDIA_INFO_METADATA_UPDATE:
                    Log.d(TAG, "MEDIA_INFO_METADATA_UPDATE:");
                    break;
                case IMGPlayer.MEDIA_INFO_UNSUPPORTED_SUBTITLE:
                    Log.d(TAG, "MEDIA_INFO_UNSUPPORTED_SUBTITLE:");
                    break;
                case IMGPlayer.MEDIA_INFO_SUBTITLE_TIMED_OUT:
                    Log.d(TAG, "MEDIA_INFO_SUBTITLE_TIMED_OUT:");
                    break;
                case IMGPlayer.MEDIA_INFO_VIDEO_ROTATION_CHANGED:
                    Log.d(TAG, "MEDIA_INFO_VIDEO_ROTATION_CHANGED: " + extra);
                    break;
                case IMGPlayer.MEDIA_INFO_AUDIO_RENDERING_START:
                    Log.d(TAG, "MEDIA_INFO_AUDIO_RENDERING_START:");
                    break;
                case IMGPlayer.MEDIA_INFO_CONNEC_DNS:
                    Log.d(TAG, "MEDIA_INFO_CONNEC_DNS: " + extra);
                    break;
                case IMGPlayer.MEDIA_INFO_CONNEC_REDIRECT:
                    Log.d(TAG, "MEDIA_INFO_CONNEC_REDIRECT " + extra);
                    break;
                case IMGPlayer.MEDIA_INFO_CONNEC_HIT:
                    Log.d(TAG, "MEDIA_INFO_CONNEC_HIT " + extra);
                    break;
                case IMGPlayer.MEDIA_INFO_CONNEC_PLAYLIST:
                    break;
                default:
                    break;
            }

            return false;
        }

        @Override
        public boolean dataCallback(IMGPlayer mp, int what, int extra, byte[] data) {
            Log.d(TAG, "dataCallback");

            switch (what) {
                case IMGPlayer.MEDIA_DATACALLBACK_SNAPSHOT_COMPLETE:
                    //int width = mp.getVideoWidth();
                    //int height = mp.getVideoHeight();
                    //Log.d(TAG, "MEDIA_DATACALLBACK_SNAPSHOT_COMPLETE data length:" + data.length + ", width:" + width + ", height:" + height);
                    //savePicture(data, width, height);
                    break;
                default:
                    break;
            }
            return false;
        }
    };
    //Add normal video listener when the video uri is error 2016-02-18 end
    
    public void setOrientationListener(OrientationListener listener) {
        if (mMediaController != null) {
            mMediaController.setOrientationListener(listener);
        }
    }
}